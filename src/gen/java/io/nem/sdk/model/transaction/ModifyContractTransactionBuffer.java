// automatically generated by the FlatBuffers compiler, do not modify

package io.nem.sdk.model.transaction;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ModifyContractTransactionBuffer extends Table {
  public static ModifyContractTransactionBuffer getRootAsModifyContractTransactionBuffer(ByteBuffer _bb) { return getRootAsModifyContractTransactionBuffer(_bb, new ModifyContractTransactionBuffer()); }
  public static ModifyContractTransactionBuffer getRootAsModifyContractTransactionBuffer(ByteBuffer _bb, ModifyContractTransactionBuffer obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public ModifyContractTransactionBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long size() { int o = __offset(4); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public int signature(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int signatureLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer signatureAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer signatureInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public int signer(int j) { int o = __offset(8); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int signerLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer signerAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer signerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public int version() { int o = __offset(10); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public int type() { int o = __offset(12); return o != 0 ? bb.getShort(o + bb_pos) & 0xFFFF : 0; }
  public long fee(int j) { int o = __offset(14); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int feeLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer feeAsByteBuffer() { return __vector_as_bytebuffer(14, 4); }
  public ByteBuffer feeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 4); }
  public long deadline(int j) { int o = __offset(16); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int deadlineLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer deadlineAsByteBuffer() { return __vector_as_bytebuffer(16, 4); }
  public ByteBuffer deadlineInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 4); }
  public long durationDelta(int j) { int o = __offset(18); return o != 0 ? (long)bb.getInt(__vector(o) + j * 4) & 0xFFFFFFFFL : 0; }
  public int durationDeltaLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer durationDeltaAsByteBuffer() { return __vector_as_bytebuffer(18, 4); }
  public ByteBuffer durationDeltaInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 4); }
  public int hash(int j) { int o = __offset(20); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int hashLength() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer hashAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer hashInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  public int numCustomers() { int o = __offset(22); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int numExecutors() { int o = __offset(24); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int numVerifiers() { int o = __offset(26); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public CosignatoryModificationBuffer customers(int j) { return customers(new CosignatoryModificationBuffer(), j); }
  public CosignatoryModificationBuffer customers(CosignatoryModificationBuffer obj, int j) { int o = __offset(28); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int customersLength() { int o = __offset(28); return o != 0 ? __vector_len(o) : 0; }
  public CosignatoryModificationBuffer executors(int j) { return executors(new CosignatoryModificationBuffer(), j); }
  public CosignatoryModificationBuffer executors(CosignatoryModificationBuffer obj, int j) { int o = __offset(30); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int executorsLength() { int o = __offset(30); return o != 0 ? __vector_len(o) : 0; }
  public CosignatoryModificationBuffer verifiers(int j) { return verifiers(new CosignatoryModificationBuffer(), j); }
  public CosignatoryModificationBuffer verifiers(CosignatoryModificationBuffer obj, int j) { int o = __offset(32); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int verifiersLength() { int o = __offset(32); return o != 0 ? __vector_len(o) : 0; }

  public static int createModifyContractTransactionBuffer(FlatBufferBuilder builder,
      long size,
      int signatureOffset,
      int signerOffset,
      int version,
      int type,
      int feeOffset,
      int deadlineOffset,
      int durationDeltaOffset,
      int hashOffset,
      int numCustomers,
      int numExecutors,
      int numVerifiers,
      int customersOffset,
      int executorsOffset,
      int verifiersOffset) {
    builder.startObject(15);
    ModifyContractTransactionBuffer.addVerifiers(builder, verifiersOffset);
    ModifyContractTransactionBuffer.addExecutors(builder, executorsOffset);
    ModifyContractTransactionBuffer.addCustomers(builder, customersOffset);
    ModifyContractTransactionBuffer.addHash(builder, hashOffset);
    ModifyContractTransactionBuffer.addDurationDelta(builder, durationDeltaOffset);
    ModifyContractTransactionBuffer.addDeadline(builder, deadlineOffset);
    ModifyContractTransactionBuffer.addFee(builder, feeOffset);
    ModifyContractTransactionBuffer.addSigner(builder, signerOffset);
    ModifyContractTransactionBuffer.addSignature(builder, signatureOffset);
    ModifyContractTransactionBuffer.addSize(builder, size);
    ModifyContractTransactionBuffer.addType(builder, type);
    ModifyContractTransactionBuffer.addVersion(builder, version);
    ModifyContractTransactionBuffer.addNumVerifiers(builder, numVerifiers);
    ModifyContractTransactionBuffer.addNumExecutors(builder, numExecutors);
    ModifyContractTransactionBuffer.addNumCustomers(builder, numCustomers);
    return ModifyContractTransactionBuffer.endModifyContractTransactionBuffer(builder);
  }

  public static void startModifyContractTransactionBuffer(FlatBufferBuilder builder) { builder.startObject(15); }
  public static void addSize(FlatBufferBuilder builder, long size) { builder.addInt(0, (int)size, (int)0L); }
  public static void addSignature(FlatBufferBuilder builder, int signatureOffset) { builder.addOffset(1, signatureOffset, 0); }
  public static int createSignatureVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startSignatureVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addSigner(FlatBufferBuilder builder, int signerOffset) { builder.addOffset(2, signerOffset, 0); }
  public static int createSignerVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startSignerVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addVersion(FlatBufferBuilder builder, int version) { builder.addShort(3, (short)version, (short)0); }
  public static void addType(FlatBufferBuilder builder, int type) { builder.addShort(4, (short)type, (short)0); }
  public static void addFee(FlatBufferBuilder builder, int feeOffset) { builder.addOffset(5, feeOffset, 0); }
  public static int createFeeVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startFeeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDeadline(FlatBufferBuilder builder, int deadlineOffset) { builder.addOffset(6, deadlineOffset, 0); }
  public static int createDeadlineVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startDeadlineVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDurationDelta(FlatBufferBuilder builder, int durationDeltaOffset) { builder.addOffset(7, durationDeltaOffset, 0); }
  public static int createDurationDeltaVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startDurationDeltaVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addHash(FlatBufferBuilder builder, int hashOffset) { builder.addOffset(8, hashOffset, 0); }
  public static int createHashVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startHashVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addNumCustomers(FlatBufferBuilder builder, int numCustomers) { builder.addByte(9, (byte)numCustomers, (byte)0); }
  public static void addNumExecutors(FlatBufferBuilder builder, int numExecutors) { builder.addByte(10, (byte)numExecutors, (byte)0); }
  public static void addNumVerifiers(FlatBufferBuilder builder, int numVerifiers) { builder.addByte(11, (byte)numVerifiers, (byte)0); }
  public static void addCustomers(FlatBufferBuilder builder, int customersOffset) { builder.addOffset(12, customersOffset, 0); }
  public static int createCustomersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCustomersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addExecutors(FlatBufferBuilder builder, int executorsOffset) { builder.addOffset(13, executorsOffset, 0); }
  public static int createExecutorsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startExecutorsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addVerifiers(FlatBufferBuilder builder, int verifiersOffset) { builder.addOffset(14, verifiersOffset, 0); }
  public static int createVerifiersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startVerifiersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endModifyContractTransactionBuffer(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishModifyContractTransactionBufferBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedModifyContractTransactionBufferBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }
}

