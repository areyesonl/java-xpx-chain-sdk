/*
 * Catapult REST API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.13
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.proximax.sdk.gen.api;

import io.proximax.sdk.gen.ApiCallback;
import io.proximax.sdk.gen.ApiClient;
import io.proximax.sdk.gen.ApiException;
import io.proximax.sdk.gen.ApiResponse;
import io.proximax.sdk.gen.Configuration;
import io.proximax.sdk.gen.Pair;
import io.proximax.sdk.gen.ProgressRequestBody;
import io.proximax.sdk.gen.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.proximax.sdk.gen.model.AccountInfoDTO;
import io.proximax.sdk.gen.model.AccountPropertiesInfoDTO;
import io.proximax.sdk.gen.model.Addresses;
import io.proximax.sdk.gen.model.MultisigAccountGraphInfoDTO;
import io.proximax.sdk.gen.model.MultisigAccountInfoDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountRoutesApi {
    private ApiClient apiClient;

    public AccountRoutesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountRoutesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAccountInfo
     * @param accountId The public key or address of the account. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountInfoCall(String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/{accountId}"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountInfoValidateBeforeCall(String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountInfoCall(accountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get account information
     * Returns the account information.
     * @param accountId The public key or address of the account. (required)
     * @return AccountInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountInfoDTO getAccountInfo(String accountId) throws ApiException {
        ApiResponse<AccountInfoDTO> resp = getAccountInfoWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * Get account information
     * Returns the account information.
     * @param accountId The public key or address of the account. (required)
     * @return ApiResponse&lt;AccountInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountInfoDTO> getAccountInfoWithHttpInfo(String accountId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountInfoValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<AccountInfoDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get account information (asynchronously)
     * Returns the account information.
     * @param accountId The public key or address of the account. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountInfoAsync(String accountId, final ApiCallback<AccountInfoDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountInfoValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountInfoDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountMultisig
     * @param accountId The public key or address of the account. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountMultisigCall(String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/{accountId}/multisig"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountMultisigValidateBeforeCall(String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountMultisig(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountMultisigCall(accountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get multisig account information
     * Returns the [multisig account](https://bcdocs.xpxsirius.io/concepts/multisig-account.html) information.
     * @param accountId The public key or address of the account. (required)
     * @return MultisigAccountInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MultisigAccountInfoDTO getAccountMultisig(String accountId) throws ApiException {
        ApiResponse<MultisigAccountInfoDTO> resp = getAccountMultisigWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * Get multisig account information
     * Returns the [multisig account](https://bcdocs.xpxsirius.io/concepts/multisig-account.html) information.
     * @param accountId The public key or address of the account. (required)
     * @return ApiResponse&lt;MultisigAccountInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MultisigAccountInfoDTO> getAccountMultisigWithHttpInfo(String accountId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountMultisigValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<MultisigAccountInfoDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get multisig account information (asynchronously)
     * Returns the [multisig account](https://bcdocs.xpxsirius.io/concepts/multisig-account.html) information.
     * @param accountId The public key or address of the account. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountMultisigAsync(String accountId, final ApiCallback<MultisigAccountInfoDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountMultisigValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MultisigAccountInfoDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountMultisigGraph
     * @param accountId The public key or address of the account. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountMultisigGraphCall(String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/{accountId}/multisig/graph"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountMultisigGraphValidateBeforeCall(String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountMultisigGraph(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountMultisigGraphCall(accountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get multisig account graph information
     * Returns the [multisig account](https://bcdocs.xpxsirius.io/concepts/multisig-account.html) graph.
     * @param accountId The public key or address of the account. (required)
     * @return List&lt;MultisigAccountGraphInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MultisigAccountGraphInfoDTO> getAccountMultisigGraph(String accountId) throws ApiException {
        ApiResponse<List<MultisigAccountGraphInfoDTO>> resp = getAccountMultisigGraphWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * Get multisig account graph information
     * Returns the [multisig account](https://bcdocs.xpxsirius.io/concepts/multisig-account.html) graph.
     * @param accountId The public key or address of the account. (required)
     * @return ApiResponse&lt;List&lt;MultisigAccountGraphInfoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MultisigAccountGraphInfoDTO>> getAccountMultisigGraphWithHttpInfo(String accountId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountMultisigGraphValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<List<MultisigAccountGraphInfoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get multisig account graph information (asynchronously)
     * Returns the [multisig account](https://bcdocs.xpxsirius.io/concepts/multisig-account.html) graph.
     * @param accountId The public key or address of the account. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountMultisigGraphAsync(String accountId, final ApiCallback<List<MultisigAccountGraphInfoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountMultisigGraphValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MultisigAccountGraphInfoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountProperties
     * @param accountId The public key or address of the account. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountPropertiesCall(String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/{accountId}/properties"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountPropertiesValidateBeforeCall(String accountId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountProperties(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountPropertiesCall(accountId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get account configurable properties information
     * Returns the [configurable properties](https://bcdocs.xpxsirius.io/concepts/account-filter.html) for a given account. 
     * @param accountId The public key or address of the account. (required)
     * @return AccountPropertiesInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountPropertiesInfoDTO getAccountProperties(String accountId) throws ApiException {
        ApiResponse<AccountPropertiesInfoDTO> resp = getAccountPropertiesWithHttpInfo(accountId);
        return resp.getData();
    }

    /**
     * Get account configurable properties information
     * Returns the [configurable properties](https://bcdocs.xpxsirius.io/concepts/account-filter.html) for a given account. 
     * @param accountId The public key or address of the account. (required)
     * @return ApiResponse&lt;AccountPropertiesInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountPropertiesInfoDTO> getAccountPropertiesWithHttpInfo(String accountId) throws ApiException {
        com.squareup.okhttp.Call call = getAccountPropertiesValidateBeforeCall(accountId, null, null);
        Type localVarReturnType = new TypeToken<AccountPropertiesInfoDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get account configurable properties information (asynchronously)
     * Returns the [configurable properties](https://bcdocs.xpxsirius.io/concepts/account-filter.html) for a given account. 
     * @param accountId The public key or address of the account. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountPropertiesAsync(String accountId, final ApiCallback<AccountPropertiesInfoDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountPropertiesValidateBeforeCall(accountId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountPropertiesInfoDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountPropertiesFromAccounts
     * @param addresses An array of addresses. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountPropertiesFromAccountsCall(Addresses addresses, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addresses;

        // create path and map variables
        String localVarPath = "/account/properties";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountPropertiesFromAccountsValidateBeforeCall(Addresses addresses, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addresses' is set
        if (addresses == null) {
            throw new ApiException("Missing the required parameter 'addresses' when calling getAccountPropertiesFromAccounts(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountPropertiesFromAccountsCall(addresses, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get account properties for given array of addresses
     * Returns the [configurable properties](https://bcdocs.xpxsirius.io/concepts/account-filter.html) for a given array of addresses. 
     * @param addresses An array of addresses. (required)
     * @return List&lt;AccountPropertiesInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AccountPropertiesInfoDTO> getAccountPropertiesFromAccounts(Addresses addresses) throws ApiException {
        ApiResponse<List<AccountPropertiesInfoDTO>> resp = getAccountPropertiesFromAccountsWithHttpInfo(addresses);
        return resp.getData();
    }

    /**
     * Get account properties for given array of addresses
     * Returns the [configurable properties](https://bcdocs.xpxsirius.io/concepts/account-filter.html) for a given array of addresses. 
     * @param addresses An array of addresses. (required)
     * @return ApiResponse&lt;List&lt;AccountPropertiesInfoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AccountPropertiesInfoDTO>> getAccountPropertiesFromAccountsWithHttpInfo(Addresses addresses) throws ApiException {
        com.squareup.okhttp.Call call = getAccountPropertiesFromAccountsValidateBeforeCall(addresses, null, null);
        Type localVarReturnType = new TypeToken<List<AccountPropertiesInfoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get account properties for given array of addresses (asynchronously)
     * Returns the [configurable properties](https://bcdocs.xpxsirius.io/concepts/account-filter.html) for a given array of addresses. 
     * @param addresses An array of addresses. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountPropertiesFromAccountsAsync(Addresses addresses, final ApiCallback<List<AccountPropertiesInfoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountPropertiesFromAccountsValidateBeforeCall(addresses, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AccountPropertiesInfoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccountsInfo
     * @param addresses An array of addresses. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountsInfoCall(Addresses addresses, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addresses;

        // create path and map variables
        String localVarPath = "/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountsInfoValidateBeforeCall(Addresses addresses, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addresses' is set
        if (addresses == null) {
            throw new ApiException("Missing the required parameter 'addresses' when calling getAccountsInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountsInfoCall(addresses, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get accounts information
     * Returns the account information for an array of accounts.
     * @param addresses An array of addresses. (required)
     * @return List&lt;AccountInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AccountInfoDTO> getAccountsInfo(Addresses addresses) throws ApiException {
        ApiResponse<List<AccountInfoDTO>> resp = getAccountsInfoWithHttpInfo(addresses);
        return resp.getData();
    }

    /**
     * Get accounts information
     * Returns the account information for an array of accounts.
     * @param addresses An array of addresses. (required)
     * @return ApiResponse&lt;List&lt;AccountInfoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AccountInfoDTO>> getAccountsInfoWithHttpInfo(Addresses addresses) throws ApiException {
        com.squareup.okhttp.Call call = getAccountsInfoValidateBeforeCall(addresses, null, null);
        Type localVarReturnType = new TypeToken<List<AccountInfoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get accounts information (asynchronously)
     * Returns the account information for an array of accounts.
     * @param addresses An array of addresses. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountsInfoAsync(Addresses addresses, final ApiCallback<List<AccountInfoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountsInfoValidateBeforeCall(addresses, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<AccountInfoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for incomingTransactions
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id: Descending order by id. * id: Ascending order by id.  (optional, default to -id)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call incomingTransactionsCall(String publicKey, Integer pageSize, String id, String ordering, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/{publicKey}/transactions/incoming"
            .replaceAll("\\{" + "publicKey" + "\\}", apiClient.escapeString(publicKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (ordering != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ordering", ordering));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call incomingTransactionsValidateBeforeCall(String publicKey, Integer pageSize, String id, String ordering, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'publicKey' is set
        if (publicKey == null) {
            throw new ApiException("Missing the required parameter 'publicKey' when calling incomingTransactions(Async)");
        }
        

        com.squareup.okhttp.Call call = incomingTransactionsCall(publicKey, pageSize, id, ordering, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get incoming transactions
     * Gets an array of incoming transactions. A transaction is said to be incoming with respect to an account if the account is the recipient of the transaction. 
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id: Descending order by id. * id: Ascending order by id.  (optional, default to -id)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> incomingTransactions(String publicKey, Integer pageSize, String id, String ordering) throws ApiException {
        ApiResponse<List<Object>> resp = incomingTransactionsWithHttpInfo(publicKey, pageSize, id, ordering);
        return resp.getData();
    }

    /**
     * Get incoming transactions
     * Gets an array of incoming transactions. A transaction is said to be incoming with respect to an account if the account is the recipient of the transaction. 
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id: Descending order by id. * id: Ascending order by id.  (optional, default to -id)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> incomingTransactionsWithHttpInfo(String publicKey, Integer pageSize, String id, String ordering) throws ApiException {
        com.squareup.okhttp.Call call = incomingTransactionsValidateBeforeCall(publicKey, pageSize, id, ordering, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get incoming transactions (asynchronously)
     * Gets an array of incoming transactions. A transaction is said to be incoming with respect to an account if the account is the recipient of the transaction. 
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id: Descending order by id. * id: Ascending order by id.  (optional, default to -id)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call incomingTransactionsAsync(String publicKey, Integer pageSize, String id, String ordering, final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = incomingTransactionsValidateBeforeCall(publicKey, pageSize, id, ordering, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for outgoingTransactions
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id: Descending order by id. * id: Ascending order by id.  (optional, default to -id)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call outgoingTransactionsCall(String publicKey, Integer pageSize, String id, String ordering, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/{publicKey}/transactions/outgoing"
            .replaceAll("\\{" + "publicKey" + "\\}", apiClient.escapeString(publicKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (ordering != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ordering", ordering));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call outgoingTransactionsValidateBeforeCall(String publicKey, Integer pageSize, String id, String ordering, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'publicKey' is set
        if (publicKey == null) {
            throw new ApiException("Missing the required parameter 'publicKey' when calling outgoingTransactions(Async)");
        }
        

        com.squareup.okhttp.Call call = outgoingTransactionsCall(publicKey, pageSize, id, ordering, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get outgoing transactions
     * Gets an array of outgoing transactions. A transaction is said to be outgoing with respect to an account if the account is the sender of the transaction.
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id: Descending order by id. * id: Ascending order by id.  (optional, default to -id)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> outgoingTransactions(String publicKey, Integer pageSize, String id, String ordering) throws ApiException {
        ApiResponse<List<Object>> resp = outgoingTransactionsWithHttpInfo(publicKey, pageSize, id, ordering);
        return resp.getData();
    }

    /**
     * Get outgoing transactions
     * Gets an array of outgoing transactions. A transaction is said to be outgoing with respect to an account if the account is the sender of the transaction.
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id: Descending order by id. * id: Ascending order by id.  (optional, default to -id)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> outgoingTransactionsWithHttpInfo(String publicKey, Integer pageSize, String id, String ordering) throws ApiException {
        com.squareup.okhttp.Call call = outgoingTransactionsValidateBeforeCall(publicKey, pageSize, id, ordering, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get outgoing transactions (asynchronously)
     * Gets an array of outgoing transactions. A transaction is said to be outgoing with respect to an account if the account is the sender of the transaction.
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id: Descending order by id. * id: Ascending order by id.  (optional, default to -id)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call outgoingTransactionsAsync(String publicKey, Integer pageSize, String id, String ordering, final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = outgoingTransactionsValidateBeforeCall(publicKey, pageSize, id, ordering, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for partialTransactions
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id: Descending order by id. * id: Ascending order by id.  (optional, default to -id)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call partialTransactionsCall(String publicKey, Integer pageSize, String id, String ordering, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/{publicKey}/transactions/partial"
            .replaceAll("\\{" + "publicKey" + "\\}", apiClient.escapeString(publicKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (ordering != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ordering", ordering));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call partialTransactionsValidateBeforeCall(String publicKey, Integer pageSize, String id, String ordering, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'publicKey' is set
        if (publicKey == null) {
            throw new ApiException("Missing the required parameter 'publicKey' when calling partialTransactions(Async)");
        }
        

        com.squareup.okhttp.Call call = partialTransactionsCall(publicKey, pageSize, id, ordering, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get aggregate bonded transactions information
     * Gets an array of [aggregate bonded transactions](https://bcdocs.xpxsirius.io/concepts/aggregate-transaction.html) where the account is the sender or requires to cosign the transaction. 
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id: Descending order by id. * id: Ascending order by id.  (optional, default to -id)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> partialTransactions(String publicKey, Integer pageSize, String id, String ordering) throws ApiException {
        ApiResponse<List<Object>> resp = partialTransactionsWithHttpInfo(publicKey, pageSize, id, ordering);
        return resp.getData();
    }

    /**
     * Get aggregate bonded transactions information
     * Gets an array of [aggregate bonded transactions](https://bcdocs.xpxsirius.io/concepts/aggregate-transaction.html) where the account is the sender or requires to cosign the transaction. 
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id: Descending order by id. * id: Ascending order by id.  (optional, default to -id)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> partialTransactionsWithHttpInfo(String publicKey, Integer pageSize, String id, String ordering) throws ApiException {
        com.squareup.okhttp.Call call = partialTransactionsValidateBeforeCall(publicKey, pageSize, id, ordering, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get aggregate bonded transactions information (asynchronously)
     * Gets an array of [aggregate bonded transactions](https://bcdocs.xpxsirius.io/concepts/aggregate-transaction.html) where the account is the sender or requires to cosign the transaction. 
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id: Descending order by id. * id: Ascending order by id.  (optional, default to -id)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call partialTransactionsAsync(String publicKey, Integer pageSize, String id, String ordering, final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = partialTransactionsValidateBeforeCall(publicKey, pageSize, id, ordering, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for transactions
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id: Descending order by id. * id: Ascending order by id.  (optional, default to -id)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call transactionsCall(String publicKey, Integer pageSize, String id, String ordering, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/{publicKey}/transactions"
            .replaceAll("\\{" + "publicKey" + "\\}", apiClient.escapeString(publicKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (ordering != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ordering", ordering));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call transactionsValidateBeforeCall(String publicKey, Integer pageSize, String id, String ordering, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'publicKey' is set
        if (publicKey == null) {
            throw new ApiException("Missing the required parameter 'publicKey' when calling transactions(Async)");
        }
        

        com.squareup.okhttp.Call call = transactionsCall(publicKey, pageSize, id, ordering, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get confirmed transactions
     * Gets an array of transactions for which an account is the sender or receiver.
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id: Descending order by id. * id: Ascending order by id.  (optional, default to -id)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> transactions(String publicKey, Integer pageSize, String id, String ordering) throws ApiException {
        ApiResponse<List<Object>> resp = transactionsWithHttpInfo(publicKey, pageSize, id, ordering);
        return resp.getData();
    }

    /**
     * Get confirmed transactions
     * Gets an array of transactions for which an account is the sender or receiver.
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id: Descending order by id. * id: Ascending order by id.  (optional, default to -id)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> transactionsWithHttpInfo(String publicKey, Integer pageSize, String id, String ordering) throws ApiException {
        com.squareup.okhttp.Call call = transactionsValidateBeforeCall(publicKey, pageSize, id, ordering, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get confirmed transactions (asynchronously)
     * Gets an array of transactions for which an account is the sender or receiver.
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id: Descending order by id. * id: Ascending order by id.  (optional, default to -id)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call transactionsAsync(String publicKey, Integer pageSize, String id, String ordering, final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = transactionsValidateBeforeCall(publicKey, pageSize, id, ordering, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for unconfirmedTransactions
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id: Descending order by id. * id: Ascending order by id.  (optional, default to -id)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call unconfirmedTransactionsCall(String publicKey, Integer pageSize, String id, String ordering, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/{publicKey}/transactions/unconfirmed"
            .replaceAll("\\{" + "publicKey" + "\\}", apiClient.escapeString(publicKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));
        if (ordering != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ordering", ordering));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call unconfirmedTransactionsValidateBeforeCall(String publicKey, Integer pageSize, String id, String ordering, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'publicKey' is set
        if (publicKey == null) {
            throw new ApiException("Missing the required parameter 'publicKey' when calling unconfirmedTransactions(Async)");
        }
        

        com.squareup.okhttp.Call call = unconfirmedTransactionsCall(publicKey, pageSize, id, ordering, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get unconfirmed transactions
     * Gets the array of transactions not included in a block where an account is the sender or receiver. 
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id: Descending order by id. * id: Ascending order by id.  (optional, default to -id)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Object> unconfirmedTransactions(String publicKey, Integer pageSize, String id, String ordering) throws ApiException {
        ApiResponse<List<Object>> resp = unconfirmedTransactionsWithHttpInfo(publicKey, pageSize, id, ordering);
        return resp.getData();
    }

    /**
     * Get unconfirmed transactions
     * Gets the array of transactions not included in a block where an account is the sender or receiver. 
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id: Descending order by id. * id: Ascending order by id.  (optional, default to -id)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Object>> unconfirmedTransactionsWithHttpInfo(String publicKey, Integer pageSize, String id, String ordering) throws ApiException {
        com.squareup.okhttp.Call call = unconfirmedTransactionsValidateBeforeCall(publicKey, pageSize, id, ordering, null, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get unconfirmed transactions (asynchronously)
     * Gets the array of transactions not included in a block where an account is the sender or receiver. 
     * @param publicKey The public key of the account. (required)
     * @param pageSize The number of transactions to return for each request. (optional, default to 10)
     * @param id The transaction id up to which transactions are returned.  (optional)
     * @param ordering The ordering criteria. * -id: Descending order by id. * id: Ascending order by id.  (optional, default to -id)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call unconfirmedTransactionsAsync(String publicKey, Integer pageSize, String id, String ordering, final ApiCallback<List<Object>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = unconfirmedTransactionsValidateBeforeCall(publicKey, pageSize, id, ordering, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
