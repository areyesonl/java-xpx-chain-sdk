/*
 * Catapult REST API Reference
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.13
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.proximax.sdk.gen.api;

import io.proximax.sdk.gen.ApiCallback;
import io.proximax.sdk.gen.ApiClient;
import io.proximax.sdk.gen.ApiException;
import io.proximax.sdk.gen.ApiResponse;
import io.proximax.sdk.gen.Configuration;
import io.proximax.sdk.gen.Pair;
import io.proximax.sdk.gen.ProgressRequestBody;
import io.proximax.sdk.gen.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.proximax.sdk.gen.model.Addresses;
import io.proximax.sdk.gen.model.NamespaceIds;
import io.proximax.sdk.gen.model.NamespaceInfoDTO;
import io.proximax.sdk.gen.model.NamespaceNameDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NamespaceRoutesApi {
    private ApiClient apiClient;

    public NamespaceRoutesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NamespaceRoutesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getNamespace
     * @param namespaceId The namespace identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNamespaceCall(String namespaceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/namespace/{namespaceId}"
            .replaceAll("\\{" + "namespaceId" + "\\}", apiClient.escapeString(namespaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNamespaceValidateBeforeCall(String namespaceId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespaceId' is set
        if (namespaceId == null) {
            throw new ApiException("Missing the required parameter 'namespaceId' when calling getNamespace(Async)");
        }
        

        com.squareup.okhttp.Call call = getNamespaceCall(namespaceId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get namespace information
     * Gets the namespace for a given namespaceId.
     * @param namespaceId The namespace identifier. (required)
     * @return NamespaceInfoDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public NamespaceInfoDTO getNamespace(String namespaceId) throws ApiException {
        ApiResponse<NamespaceInfoDTO> resp = getNamespaceWithHttpInfo(namespaceId);
        return resp.getData();
    }

    /**
     * Get namespace information
     * Gets the namespace for a given namespaceId.
     * @param namespaceId The namespace identifier. (required)
     * @return ApiResponse&lt;NamespaceInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<NamespaceInfoDTO> getNamespaceWithHttpInfo(String namespaceId) throws ApiException {
        com.squareup.okhttp.Call call = getNamespaceValidateBeforeCall(namespaceId, null, null);
        Type localVarReturnType = new TypeToken<NamespaceInfoDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get namespace information (asynchronously)
     * Gets the namespace for a given namespaceId.
     * @param namespaceId The namespace identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNamespaceAsync(String namespaceId, final ApiCallback<NamespaceInfoDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNamespaceValidateBeforeCall(namespaceId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<NamespaceInfoDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNamespacesFromAccount
     * @param accountId The address or public key of the account. (required)
     * @param pageSize The number of namespaces to return. (optional)
     * @param id The namespace id up to which namespace objects are returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNamespacesFromAccountCall(String accountId, Integer pageSize, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/account/{accountId}/namespaces"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNamespacesFromAccountValidateBeforeCall(String accountId, Integer pageSize, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getNamespacesFromAccount(Async)");
        }
        

        com.squareup.okhttp.Call call = getNamespacesFromAccountCall(accountId, pageSize, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get namespaces owned by an account
     * Gets an array of namespaces for a given account address.
     * @param accountId The address or public key of the account. (required)
     * @param pageSize The number of namespaces to return. (optional)
     * @param id The namespace id up to which namespace objects are returned. (optional)
     * @return List&lt;NamespaceInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<NamespaceInfoDTO> getNamespacesFromAccount(String accountId, Integer pageSize, String id) throws ApiException {
        ApiResponse<List<NamespaceInfoDTO>> resp = getNamespacesFromAccountWithHttpInfo(accountId, pageSize, id);
        return resp.getData();
    }

    /**
     * Get namespaces owned by an account
     * Gets an array of namespaces for a given account address.
     * @param accountId The address or public key of the account. (required)
     * @param pageSize The number of namespaces to return. (optional)
     * @param id The namespace id up to which namespace objects are returned. (optional)
     * @return ApiResponse&lt;List&lt;NamespaceInfoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<NamespaceInfoDTO>> getNamespacesFromAccountWithHttpInfo(String accountId, Integer pageSize, String id) throws ApiException {
        com.squareup.okhttp.Call call = getNamespacesFromAccountValidateBeforeCall(accountId, pageSize, id, null, null);
        Type localVarReturnType = new TypeToken<List<NamespaceInfoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get namespaces owned by an account (asynchronously)
     * Gets an array of namespaces for a given account address.
     * @param accountId The address or public key of the account. (required)
     * @param pageSize The number of namespaces to return. (optional)
     * @param id The namespace id up to which namespace objects are returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNamespacesFromAccountAsync(String accountId, Integer pageSize, String id, final ApiCallback<List<NamespaceInfoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNamespacesFromAccountValidateBeforeCall(accountId, pageSize, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<NamespaceInfoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNamespacesFromAccounts
     * @param addresses An array of addresses. (required)
     * @param pageSize The number of namespaces to return. (optional)
     * @param id The namespace id up to which namespace objects are returned. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNamespacesFromAccountsCall(Addresses addresses, Integer pageSize, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = addresses;

        // create path and map variables
        String localVarPath = "/account/namespaces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (id != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("id", id));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNamespacesFromAccountsValidateBeforeCall(Addresses addresses, Integer pageSize, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'addresses' is set
        if (addresses == null) {
            throw new ApiException("Missing the required parameter 'addresses' when calling getNamespacesFromAccounts(Async)");
        }
        

        com.squareup.okhttp.Call call = getNamespacesFromAccountsCall(addresses, pageSize, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get namespaces for given array of addresses
     * Gets namespaces for a given array of addresses.
     * @param addresses An array of addresses. (required)
     * @param pageSize The number of namespaces to return. (optional)
     * @param id The namespace id up to which namespace objects are returned. (optional)
     * @return List&lt;NamespaceInfoDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<NamespaceInfoDTO> getNamespacesFromAccounts(Addresses addresses, Integer pageSize, String id) throws ApiException {
        ApiResponse<List<NamespaceInfoDTO>> resp = getNamespacesFromAccountsWithHttpInfo(addresses, pageSize, id);
        return resp.getData();
    }

    /**
     * Get namespaces for given array of addresses
     * Gets namespaces for a given array of addresses.
     * @param addresses An array of addresses. (required)
     * @param pageSize The number of namespaces to return. (optional)
     * @param id The namespace id up to which namespace objects are returned. (optional)
     * @return ApiResponse&lt;List&lt;NamespaceInfoDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<NamespaceInfoDTO>> getNamespacesFromAccountsWithHttpInfo(Addresses addresses, Integer pageSize, String id) throws ApiException {
        com.squareup.okhttp.Call call = getNamespacesFromAccountsValidateBeforeCall(addresses, pageSize, id, null, null);
        Type localVarReturnType = new TypeToken<List<NamespaceInfoDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get namespaces for given array of addresses (asynchronously)
     * Gets namespaces for a given array of addresses.
     * @param addresses An array of addresses. (required)
     * @param pageSize The number of namespaces to return. (optional)
     * @param id The namespace id up to which namespace objects are returned. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNamespacesFromAccountsAsync(Addresses addresses, Integer pageSize, String id, final ApiCallback<List<NamespaceInfoDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNamespacesFromAccountsValidateBeforeCall(addresses, pageSize, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<NamespaceInfoDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNamespacesNames
     * @param namespaceIds An array of namespaceIds. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNamespacesNamesCall(NamespaceIds namespaceIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = namespaceIds;

        // create path and map variables
        String localVarPath = "/namespace/names";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNamespacesNamesValidateBeforeCall(NamespaceIds namespaceIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'namespaceIds' is set
        if (namespaceIds == null) {
            throw new ApiException("Missing the required parameter 'namespaceIds' when calling getNamespacesNames(Async)");
        }
        

        com.squareup.okhttp.Call call = getNamespacesNamesCall(namespaceIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get readable names for a set of namespaces
     * Returns friendly names for mosaics.
     * @param namespaceIds An array of namespaceIds. (required)
     * @return List&lt;NamespaceNameDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<NamespaceNameDTO> getNamespacesNames(NamespaceIds namespaceIds) throws ApiException {
        ApiResponse<List<NamespaceNameDTO>> resp = getNamespacesNamesWithHttpInfo(namespaceIds);
        return resp.getData();
    }

    /**
     * Get readable names for a set of namespaces
     * Returns friendly names for mosaics.
     * @param namespaceIds An array of namespaceIds. (required)
     * @return ApiResponse&lt;List&lt;NamespaceNameDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<NamespaceNameDTO>> getNamespacesNamesWithHttpInfo(NamespaceIds namespaceIds) throws ApiException {
        com.squareup.okhttp.Call call = getNamespacesNamesValidateBeforeCall(namespaceIds, null, null);
        Type localVarReturnType = new TypeToken<List<NamespaceNameDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get readable names for a set of namespaces (asynchronously)
     * Returns friendly names for mosaics.
     * @param namespaceIds An array of namespaceIds. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNamespacesNamesAsync(NamespaceIds namespaceIds, final ApiCallback<List<NamespaceNameDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNamespacesNamesValidateBeforeCall(namespaceIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<NamespaceNameDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
