// automatically generated by the FlatBuffers compiler, do not modify

package io.proximax.sdk.model.transaction;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class CosignatoryModificationBuffer extends Table {
  public static CosignatoryModificationBuffer getRootAsCosignatoryModificationBuffer(ByteBuffer _bb) { return getRootAsCosignatoryModificationBuffer(_bb, new CosignatoryModificationBuffer()); }
  public static CosignatoryModificationBuffer getRootAsCosignatoryModificationBuffer(ByteBuffer _bb, CosignatoryModificationBuffer obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public CosignatoryModificationBuffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int type() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int cosignatoryPublicKey(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int cosignatoryPublicKeyLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer cosignatoryPublicKeyAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer cosignatoryPublicKeyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createCosignatoryModificationBuffer(FlatBufferBuilder builder,
      int type,
      int cosignatoryPublicKeyOffset) {
    builder.startObject(2);
    CosignatoryModificationBuffer.addCosignatoryPublicKey(builder, cosignatoryPublicKeyOffset);
    CosignatoryModificationBuffer.addType(builder, type);
    return CosignatoryModificationBuffer.endCosignatoryModificationBuffer(builder);
  }

  public static void startCosignatoryModificationBuffer(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addType(FlatBufferBuilder builder, int type) { builder.addByte(0, (byte)type, (byte)0); }
  public static void addCosignatoryPublicKey(FlatBufferBuilder builder, int cosignatoryPublicKeyOffset) { builder.addOffset(1, cosignatoryPublicKeyOffset, 0); }
  public static int createCosignatoryPublicKeyVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startCosignatoryPublicKeyVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endCosignatoryModificationBuffer(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

