/*
 * Copyright 2018 NEM
 * Copyright 2019 ProximaX
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'jvm-component'
    id 'java-lang'
    id 'net.saliman.properties' version '1.4.6'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.2'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

// load setup for integration tests
apply from: "$rootDir/gradle/integration.gradle"
// load setup for coverage reports
apply from: "$rootDir/gradle/coverage.gradle"
// loak setup for publishing
apply from: "$rootDir/gradle/publishing.gradle"

group 'io.proximax'
version '0.1.0-alpha'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

// add generated code to the man sources et
sourceSets {
    main {
    	java {
    		srcDirs += [ 'src/gen/java' ]
    	}
    }
}

// versions of dependencies
ext {
    vertxVersion = "3.5.0"
    rxjavaVersion = "2.1.7"
    junitVersion = "5.4.2"
    junitPlatformVersion = "1.4.2"
}

dependencies {
    // reactive http client
    compile "io.vertx:vertx-core:${vertxVersion}"
    compile "io.vertx:vertx-web-client:${vertxVersion}"
    compile "io.vertx:vertx-rx-java2:${vertxVersion}"
    // ReactiveX async processing
    compile "io.reactivex.rxjava2:rxjava:${rxjavaVersion}"

    // Logging facade
	compile 'org.slf4j:slf4j-api:1.7.26'
	// crypto utilities, Hex
    compile 'org.bouncycastle:bcprov-jdk15on:1.58'
    // Base32, Base64, Hex
    compile 'commons-codec:commons-codec:1.11'
    // validations
    compile 'org.apache.commons:commons-lang3:3.9'
    compile 'org.apache.commons:commons-math3:3.2'
    // sparse bitmap implementation
    compile 'com.googlecode.javaewah:JavaEWAH:1.0.0'
    // serialization of tranactions for server
    compile 'com.google.flatbuffers:flatbuffers-java:1.11.0'
	// dependencies of DTO code generated by swagger    
    compile 'com.google.code.gson:gson:2.8.2'
    compile 'io.swagger:swagger-annotations:1.5.22'

	// file utils
	testCompile 'commons-io:commons-io:2.4'
	
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'com.googlecode.matrix-toolkits-java:mtj:1.0.1'

    // Tests
    testCompile 'org.apiguardian:apiguardian-api:1.0.0'
    testCompile "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testCompile "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    
    testCompile "org.junit.platform:junit-platform-console-standalone:${junitPlatformVersion}"
    testRuntime "org.junit.platform:junit-platform-launcher:${junitPlatformVersion}"
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

tasks.whenTaskAdded { task ->
    if (task.name.equals('junitPlatformTest')) {
        System.out.println("ADDING TASK " + task.getName() + " to the project!")

        // configure jacoco to analyze the junitPlatformTest task
        jacoco {
            // this tool version is compatible with
            toolVersion = "0.7.6.201602180812"
            applyTo task
        }

        // create junit platform jacoco task
        project.task(type: JacocoReport, "junitPlatformJacocoReport",
                {
                    sourceDirectories = files("./src/main")
                    classDirectories = files("$buildDir/classes/main")
                    executionData task
                })
    }
}