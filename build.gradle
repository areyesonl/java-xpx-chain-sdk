/*
 * Copyright 2018 NEM
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'jvm-component'
    id 'java-lang'
    id 'net.saliman.properties' version '1.4.6'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.2'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

group 'io.proximax'
version '0.10.0'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    sharedCompile
}

// cobertura.coverageFormats = ['html', 'xml']

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}


def integrationTest = task('integrationTest',
        type: JavaExec,
        group: 'Verification') {
    description = 'Runs integration tests.'
    dependsOn testClasses
    shouldRunAfter test
    classpath = sourceSets.integrationTest.runtimeClasspath

    main = 'org.junit.platform.console.ConsoleLauncher'
    args = ['--scan-class-path',
            sourceSets.integrationTest.output.classesDir.absolutePath,
            '--reports-dir', "${buildDir}/test-results/junit-integrationTest"]
}

check {
    dependsOn integrationTest
}

ext {
    vertxVersion = "3.5.0"
    rxjavaVersion = "2.1.7"
    junitVersion = "5.4.2"
    junitPlatformVersion = "1.4.2"
}

dependencies {
    // Reactive
    compile "io.vertx:vertx-core:${vertxVersion}"
    compile "io.vertx:vertx-web-client:${vertxVersion}"
    compile "io.vertx:vertx-rx-java2:${vertxVersion}"
    compile "io.reactivex.rxjava2:rxjava:${rxjavaVersion}"

    // Log
    compile 'org.apache.logging.log4j:log4j-core:2.5'
    compile 'org.apache.logging.log4j:log4j-jul:2.5'

    compile 'org.bouncycastle:bcprov-jdk15on:1.58'
    compile 'commons-codec:commons-codec:1.11'
    compile 'commons-lang:commons-lang:2.6'
    compile 'commons-io:commons-io:2.4'
    compile 'net.minidev:json-smart:1.2'
    compile 'org.apache.commons:commons-math3:3.2'
    compile 'org.apache.httpcomponents:httpasyncclient:4.1.1'
    compile 'com.googlecode.javaewah:JavaEWAH:1.0.0'
    compile "com.google.flatbuffers:flatbuffers-java:1.8.0"
    compile 'com.google.code.gson:gson:2.8.2'
    compile 'io.swagger:swagger-parser:1.0.34'

    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'com.googlecode.matrix-toolkits-java:mtj:1.0.1'

    // Tests
    testCompile 'org.slf4j:slf4j-simple:1.7.25'
    testCompile 'org.apiguardian:apiguardian-api:1.0.0'
    testCompile "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testCompile "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
    
    testCompile "org.junit.platform:junit-platform-console-standalone:${junitPlatformVersion}"
    testRuntime "org.junit.platform:junit-platform-launcher:${junitPlatformVersion}"
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    def username = project.hasProperty("nexusUsername") ? project.nexusUsername : ""
    def password = project.hasProperty("nexusPassword") ? project.nexusPassword : ""

    repositories {
        mavenDeployer {
//            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://nexus.internal.proximax.io/repository/maven-releases/") {
                authentication(userName: username, password: password)
            }

            snapshotRepository(url: "https://nexus.internal.proximax.io/repository/maven-snapshots/") {
                authentication(userName: username, password: password)
            }

            pom.project {
                name "proximax-nem2-java-sdk"
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'proximax nem2 sdk'
                url 'https://github.com/nemtech/nem2-sdk-java'

                scm {
                    connection 'scm:git:git@github.com:proximax-storage/proximax-nem2-java-sdk.git'
                    developerConnection 'scm:svn:git@github.com:proximax-storage/proximax-nem2-java-sdk.git'
                    url 'git@github.com:proximax-storage/proximax-nem2-java-sdk.git'
                }
            }
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.equals('junitPlatformTest')) {
        System.out.println("ADDING TASK " + task.getName() + " to the project!")

        // configure jacoco to analyze the junitPlatformTest task
        jacoco {
            // this tool version is compatible with
            toolVersion = "0.7.6.201602180812"
            applyTo task
        }

        // create junit platform jacoco task
        project.task(type: JacocoReport, "junitPlatformJacocoReport",
                {
                    sourceDirectories = files("./src/main")
                    classDirectories = files("$buildDir/classes/main")
                    executionData task
                })
    }
}

jacocoTestReport {
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*DTO.*', '**/*Buffer.*'])
        })
    }
    reports {
        xml.enabled true
        csv.enabled true
        html.destination file("${buildDir}/jacocoHtml")
    }
}

allprojects {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}